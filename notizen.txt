Die Kugeln mit den Nummern 1 bis 8 bezeichnet man auch als die Vollen und die Kugeln 9 bis 15 als die Halben, da letztere nur zur Hälfte eingefärbt sind. Dabei sind den Nummern folgende Farben zugeordnet:

1/9 = Gelb
2/10 = Blau
3/11 = Rot
4/12 = Lila bzw. Pink1
5/13 = Orange
6/14 = Grün
7/15 = Braun1
8 = Schwarz

bouncingballs description
http://www.emanueleferonato.com/2007/08/19/managing-ball-vs-ball-collision-with-flash/

slow down balls -> google for friction

players
	- DONE 2 players
	- DONE random starter
	- DONE save full/half at first strike
	- manage current player when ball dropped
		take care when more balls drop
	- manage current player no ball dropped
	- count players balls after each turn
	- manage black ball dropped
	- manage players when white ball dropped


server.php
called without parameter 
	- create two unique_ids for the players
	- return both unique_ids

called with parameter
	- parameter1: unique_id of player
	- parameter2: xspeed,yspeed of white_ball

Nachdem man dran war muss der client ständig den server fragen, ob der andere Spieler schon gestoßen
hat und wie die weiße Kugel gestoßen wurde.
Hier wäre eine live-Verbindung besser als ständige Requests.

Siehe 
https://davidwalsh.name/websocket
https://socket.io/get-started/chat/
https://github.com/socketio/socket.io/blob/master/examples/chat/index.js

Diese Lösung
https://medium.com/@martin.sikora/node-js-websocket-simple-chat-tutorial-2def3a841b61



Lösung Websocket:
Client
// Create a socket instance
var socket = new WebSocket('ws://localhost:8080');

// Open the socket
socket.onopen = function(event) {
	
	// Send an initial message
	socket.send('I am the client and I\'m listening!');
	
	// Listen for messages
	socket.onmessage = function(event) {
		console.log('Client received a message',event);
	};
	
	// Listen for socket closes
	socket.onclose = function(event) {
		console.log('Client notified socket has closed',event);
	};
	
	// To close the socket....
	//socket.close()
	
};

Server
npm install websocket

var WebSocketServer = require('websocket').server;
var http = require('http');

var server = http.createServer(function(request, response) {
	// process HTTP request. Since we're writing just WebSockets
	// server we don't have to implement anything.
});
server.listen(1337, function() { });

// create the server
wsServer = new WebSocketServer({
	httpServer: server
});

// WebSocket server
wsServer.on('request', function(request) {
	var connection = request.accept(null, request.origin);
	console.log('incoming request');
	// This is the most important callback for us, we'll handle
	// all messages from users here.
	connection.on('message', function(message) {
	console.log('incoming message');
	if (message.type === 'utf8') {
	  // process WebSocket message
	}
	});

	connection.on('close', function(connection) {
	// close user connection
	console.log('closed connection');
	});
});

Neuaufbau ballsArray nach Stoß:
Nach Stoß wenn Kugeln wieder still stehen muss das billiardballs-Array um die Informationen des ballsArray aktualisiert werden. 
Informationen: top, left, dropped
Anschließend muss das billiardballs-Array an den Server gesendet werden,
welcher es dann wiederum an den Gegener sendet.
Es muss hierfür das billiardballs-Array (und nicht ballsArray) verwendet werden, da im ballsArray unter Umständen schon Kugeln fehlen (eingelocht), die beim Gegner aber noch existieren (Stöße sind in den Browsern nicht ganz syncron!).